// script.js

// 1. –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: –ø–ª–æ—Ç–Ω–æ—Å—Ç—å (–≥/—Å–º¬≥), —Ü–µ–Ω–∞ –∑–∞ –≥—Ä–∞–º–º (‚ÇΩ) –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
const materials = {
  PLA: [1.24, 2.42 * 5, "–∂–µ—Å—Ç–∫–∏–π, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π"],
  PETG: [1.27, 1.35 * 5, "–∂–µ—Å—Ç–∫–∏–π, –ø—Ä–æ—á–Ω—ã–π"],
  "TPU D70": [1.2, 3.62 * 5, "–≥–∏–±–∫–∏–π, —ç–ª–∞—Å—Ç–∏—á–Ω—ã–π"],
  PA6: [1.14, 4.05 * 5, "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π, –ø—Ä–æ—á–Ω—ã–π"],
  "rPETG GF": [1.3, 2.71 * 5, "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π, –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–µ–∫–ª–æ–º"],
  "TPU GF": [1.25, 4.81 * 5, "–≥–∏–±–∫–∏–π, –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"],
  ABS: [1.05, 1.79 * 5, "–∂–µ—Å—Ç–∫–∏–π, —É–¥–∞—Ä–æ–ø—Ä–æ—á–Ω—ã–π"],
  HIPS: [1.04, 2.12 * 5, "–∂–µ—Å—Ç–∫–∏–π, —Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π –≤ –ª–∏–º–æ–Ω–µ–Ω–µ"],
  ETERNAL: [1.2, 2.09 * 5, "–∂–µ—Å—Ç–∫–∏–π, —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –£–§"],
  GFMAX: [1.35, 4.87 * 5, "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π, –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–µ–∫–ª–æ–º"],
  RELAX: [1.18, 1.72 * 5, "–≥–∏–±–∫–∏–π, –º—è–≥–∫–∏–π"],
  "EASY FLEX": [1.18, 4.31 * 5, "–≥–∏–±–∫–∏–π, –¥–ª—è —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –ø–µ—á–∞—Ç–∏"],
  "SOFT FLEX": [1.18, 5.12 * 5, "–º—è–≥–∫–∏–π, —ç–ª–∞—Å—Ç–∏—á–Ω—ã–π"],
  FRICTION: [1.4, 8.7 * 5, "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π, –Ω–∏–∑–∫–æ–µ —Ç—Ä–µ–Ω–∏–µ"],
  "PP+": [0.9, 5.38 * 5, "—É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ —Ö–∏–º–∏–∏"],
  CAST: [1.2, 3.63 * 5, "–¥–ª—è –ª–∏—Ç—å—è –ø–æ –≤—ã–ø–ª–∞–≤–ª—è–µ–º—ã–º –º–æ–¥–µ–ª—è–º"],
  RUBBER: [1.1, 4.07 * 5, "—Ä–µ–∑–∏–Ω–æ–ø–æ–¥–æ–±–Ω—ã–π"],
  FORMAX: [1.35, 5.54 * 5, "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –∂—ë—Å—Ç–∫–æ—Å—Ç—å"],
  "BIOCIDE PETG": [1.27, 2.86 * 5, "–∞–Ω—Ç–∏–±–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π"],
  "TPU GF (–Ω–æ–≤)": [1.25, 4.81 * 5, "–≥–∏–±–∫–∏–π, —É—Å–∏–ª–µ–Ω–Ω—ã–π —Å—Ç–µ–∫–ª–æ–º"],
  "PA 1284": [1.13, 9.56 * 5, "–ø—Ä–æ—á–Ω—ã–π, –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π"],
  "PEEK (500–≥)": [1.32, 50.77 * 5, "–≤—ã—Å–æ–∫–æ—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π, —Å—É–ø–µ—Ä–ø–æ–ª–∏–º–µ—Ä"],
  "PEEK CF (500–≥)": [1.42, 56.74 * 5, "PEEK –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–≥–ª—ë–º"],
  "PEEK GF (500–≥)": [1.5, 59.77 * 5, "PEEK –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–µ–∫–ª–æ–º"],
  SBS: [1.04, 2.02 * 5, "—É–¥–∞—Ä–æ–ø—Ä–æ—á–Ω—ã–π, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π"],
  "PC GF": [1.3, 4.25 * 5, "–∂–∞—Ä–æ–ø—Ä–æ—á–Ω—ã–π, –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–µ–∫–ª–æ–º"],
  PVDF: [1.75, 60.36 * 5, "—Ñ—Ç–æ—Ä–æ–ø–ª–∞—Å—Ç, —Ö–∏–º—Å—Ç–æ–π–∫–∏–π"],
  PVA: [1.22, 5.39 * 5, "–≤–æ–¥–æ—Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π, –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–µ–∫"],
  ULTRAX: [1.4, 8.03 * 5, "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π, –∏–∑–Ω–æ—Å–æ—Å—Ç–æ–π–∫–∏–π"],
  "PP GF": [1.1, 4.46 * 5, "–ø–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–µ–∫–ª–æ–º"],
  "PEI 9085": [1.27, 65.53 * 5, "–∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π, —Ç–µ—Ä–º–æ—Å—Ç–æ–π–∫–∏–π"],
  PA12: [1.01, 10.41 * 5, "–Ω–µ–π–ª–æ–Ω, –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π"],
  PSU: [1.24, 18.84 * 5, "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π, —Ç–µ—Ä–º–æ—Å—Ç–æ–π–∫–∏–π"],
};

// 2. –ü–æ–ª—É—á–µ–Ω–∏–µ chatId: —Å–ø–µ—Ä–≤–∞ –∏–∑ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∏–Ω–∞—á–µ –∏–∑ Telegram WebApp
function getParam(name) {
  return new URLSearchParams(window.location.search).get(name);
}
let chatId = getParam("chatId") || null;

if (window.Telegram && window.Telegram.WebApp) {
  const tg = window.Telegram.WebApp;
  tg.ready();
  const data = tg.initDataUnsafe || {};
  chatId = chatId || data.chat?.id || data.user?.id || null;
  console.log("Telegram chatId =", chatId);
}

// 3. URL –≤–∞—à–µ–≥–æ N8N webhook
const N8N_WEBHOOK_URL =
  "https://bethichurig.beget.app/webhook/fd84ea85-fa6e-4b76-bbaa-8b8241d839c4";

// 4. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM –≤–µ—à–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç
document.addEventListener("DOMContentLoaded", () => {
  // —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç
  populateMaterials();
  calculate();

  // –ø–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
  document
    .getElementById("materialFilter")
    .addEventListener("input", populateMaterials);

  // —Å–º–µ–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
  document.getElementById("material").addEventListener("change", () => {
    updateMaterialInfo();
    calculate();
  });

  // –≤–≤–æ–¥ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  ["massValue", "quantity", "length", "width", "height", "fill"].forEach(
    (id) => {
      const el = document.getElementById(id);
      if (el) el.addEventListener("input", calculate);
    }
  );

  // –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –º–∞—Å—Å—ã/–≥–∞–±–∞—Ä–∏—Ç–æ–≤
  document.getElementById("btnMass").addEventListener("click", () => {
    document.getElementById("btnMass").classList.add("active");
    document.getElementById("btnVolume").classList.remove("active");
    document.getElementById("massInput").style.display = "flex";
    document.getElementById("volumeInput").style.display = "none";
    calculate();
  });
  document.getElementById("btnVolume").addEventListener("click", () => {
    document.getElementById("btnVolume").classList.add("active");
    document.getElementById("btnMass").classList.remove("active");
    document.getElementById("volumeInput").style.display = "flex";
    document.getElementById("massInput").style.display = "none";
    calculate();
  });

  // –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  document.querySelectorAll("#filterButtons button").forEach((button) => {
    button.addEventListener("click", () => {
      const category = button.textContent.replace(/[üîçüß±üßò‚Äç‚ôÇÔ∏èüî¨]/g, "").trim();
      document.getElementById("materialFilter").value = category;
      populateMaterials();
    });
  });

  // –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
  const tabButtons = document.querySelectorAll(".tab-button");
  const tabContents = document.querySelectorAll(".tab-content");
  tabButtons.forEach((btn) => {
    btn.addEventListener("click", () => {
      const tabId = btn.dataset.tab;
      tabButtons.forEach((b) => b.classList.remove("active"));
      tabContents.forEach((c) => (c.style.display = "none"));
      btn.classList.add("active");
      document.getElementById(tabId).style.display = "block";
    });
  });

  // –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
  const formButton = document.getElementById("sendBtn");
  formButton.addEventListener("click", (e) => {
    e.preventDefault();
    sendToN8N();
  });
});

// 5. –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ N8N
async function sendToN8N() {
  const name = document.getElementById("userName").value.trim();
  const phone = document.getElementById("userPhone").value.trim();
  const task = document.getElementById("userTask").value.trim();
  const dims = document.getElementById("userDims").value.trim();
  if (!name || !phone || !task || !dims) {
    return alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.");
  }

  const payload = { name, phone, task, dims, chatId };
  const formButton = document.getElementById("sendBtn");
  formButton.disabled = true;
  formButton.textContent = "–û—Ç–ø—Ä–∞–≤–∫–∞...";

  try {
    const res = await fetch(N8N_WEBHOOK_URL, {
      method: "POST",
      mode: "cors",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });
    if (!res.ok) throw new Error(res.status);
    alert("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
    ["userName", "userPhone", "userTask", "userDims"].forEach(
      (id) => (document.getElementById(id).value = "")
    );
  } catch (err) {
    console.error(err);
    alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
  } finally {
    formButton.disabled = false;
    formButton.textContent = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å";
  }
}

// 6. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
function populateMaterials() {
  const filter = document.getElementById("materialFilter").value.toLowerCase();
  const sel = document.getElementById("material");
  sel.innerHTML = "";
  for (const key in materials) {
    const [_, price, desc] = materials[key];
    if (desc.toLowerCase().includes(filter)) {
      const opt = document.createElement("option");
      opt.value = key;
      opt.textContent = `${key} (${desc})`;
      if (price > 100) {
        opt.style.color = "red";
        opt.style.fontWeight = "bold";
      }
      sel.appendChild(opt);
    }
  }
  updateMaterialInfo();
}

// 7. –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ
function updateMaterialInfo() {
  const sel = document.getElementById("material").value;
  if (!materials[sel]) return;
  const [density, price, desc] = materials[sel];
  document.getElementById("materialInfo").innerHTML =
    `–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: ${density} –≥/—Å–º¬≥ ‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –≥—Ä–∞–º–º: ${price.toFixed(2)} ‚ÇΩ<br>` +
    `<i>–û–ø–∏—Å–∞–Ω–∏–µ: ${desc}</i>`;
}

// 8. –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
function calculate() {
  const sel = document.getElementById("material").value;
  if (!materials[sel]) return;
  const [density, price] = materials[sel];
  const isMass = document
    .getElementById("btnMass")
    .classList.contains("active");
  let mass = 0,
    extra = "",
    connCost = 0;
  const qty = parseInt(document.getElementById("quantity").value, 10) || 1;

  if (isMass) {
    const mv = parseFloat(document.getElementById("massValue").value);
    if (!isNaN(mv)) mass = mv;
  } else {
    const l = parseFloat(document.getElementById("length").value);
    const w = parseFloat(document.getElementById("width").value);
    const h = parseFloat(document.getElementById("height").value);
    const f = parseFloat(document.getElementById("fill").value);
    if (!isNaN(l) && !isNaN(w) && !isNaN(h) && !isNaN(f)) {
      const vol = ((l * w * h) / 1000) * (f / 100);
      mass = vol * density;
      const parts = [
        l > 300 ? Math.ceil(l / 300) : 1,
        w > 300 ? Math.ceil(w / 300) : 1,
        h > 300 ? Math.ceil(h / 300) : 1,
      ].reduce((a, b) => a * b, 1);
      if (parts > 1) {
        const joins = parts - 1;
        connCost = 2500 + (joins - 1) * 1000;
        extra =
          `<br><span style="color:red;">–î–µ—Ç–∞–ª—å –±—É–¥–µ—Ç —á–∞—Å—Ç—è–º–∏; ` +
          `–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${connCost} ‚ÇΩ</span>`;
      }
    }
  }

  mass *= qty;
  const cost = Math.max(mass * price + connCost * qty, 2500);
  const html =
    `–ú–∞—Å—Å–∞ –º–æ–¥–µ–ª–∏: ${mass.toFixed(2)} –≥<br>` +
    `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost.toFixed(2)} ‚ÇΩ${extra}`;
  document.getElementById("result").innerHTML = html;
  // plain text –¥–ª—è textarea
  document.getElementById("userDims").value = html
    .replace(/<br>/g, "\n")
    .replace(/<[^>]+>/g, "");
}

// 9. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –∫–Ω–æ–ø–∫–∏ —Å–∞–º–∏ –≤—ã–∑—ã–≤–∞—é—Ç populateMaterials)
function filterCategory(keyword) {
  document.getElementById("materialFilter").value = keyword;
  populateMaterials();
}
