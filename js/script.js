const N8N_WEBHOOK_URL =
  "https://bethichurig.beget.app/webhook/fd84ea85-fa6e-4b76-bbaa-8b8241d839c4";

const materials = {
  PLA: [1.24, 2.42 * 5, "–∂–µ—Å—Ç–∫–∏–π, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π"],
  PETG: [1.27, 1.35 * 5, "–∂–µ—Å—Ç–∫–∏–π, –ø—Ä–æ—á–Ω—ã–π"],
  "TPU D70": [1.2, 3.62 * 5, "–≥–∏–±–∫–∏–π, —ç–ª–∞—Å—Ç–∏—á–Ω—ã–π"],
  PA6: [1.14, 4.05 * 5, "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π, –ø—Ä–æ—á–Ω—ã–π"],
  "rPETG GF": [1.3, 2.71 * 5, "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π, –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–µ–∫–ª–æ–º"],
  "TPU GF": [1.25, 4.81 * 5, "–≥–∏–±–∫–∏–π, –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"],
  ABS: [1.05, 1.79 * 5, "–∂–µ—Å—Ç–∫–∏–π, —É–¥–∞—Ä–æ–ø—Ä–æ—á–Ω—ã–π"],
  HIPS: [1.04, 2.12 * 5, "–∂–µ—Å—Ç–∫–∏–π, —Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π –≤ –ª–∏–º–æ–Ω–µ–Ω–µ"],
  ETERNAL: [1.2, 2.09 * 5, "–∂–µ—Å—Ç–∫–∏–π, —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –£–§"],
  GFMAX: [1.35, 4.87 * 5, "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π, –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–µ–∫–ª–æ–º"],
  RELAX: [1.18, 1.72 * 5, "–≥–∏–±–∫–∏–π, –º—è–≥–∫–∏–π"],
  "EASY FLEX": [1.18, 4.31 * 5, "–≥–∏–±–∫–∏–π, –¥–ª—è —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –ø–µ—á–∞—Ç–∏"],
  "SOFT FLEX": [1.18, 5.12 * 5, "–º—è–≥–∫–∏–π, —ç–ª–∞—Å—Ç–∏—á–Ω—ã–π"],
  FRICTION: [1.4, 8.7 * 5, "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π, –Ω–∏–∑–∫–æ–µ —Ç—Ä–µ–Ω–∏–µ"],
  "PP+": [0.9, 5.38 * 5, "—É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ —Ö–∏–º–∏–∏"],
  CAST: [1.2, 3.63 * 5, "–¥–ª—è –ª–∏—Ç—å—è –ø–æ –≤—ã–ø–ª–∞–≤–ª—è–µ–º—ã–º –º–æ–¥–µ–ª—è–º"],
  RUBBER: [1.1, 4.07 * 5, "—Ä–µ–∑–∏–Ω–æ–ø–æ–¥–æ–±–Ω—ã–π"],
  FORMAX: [1.35, 5.54 * 5, "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –∂—ë—Å—Ç–∫–æ—Å—Ç—å"],
  "BIOCIDE PETG": [1.27, 2.86 * 5, "–∞–Ω—Ç–∏–±–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π"],
  "TPU GF (–Ω–æ–≤)": [1.25, 4.81 * 5, "–≥–∏–±–∫–∏–π, —É—Å–∏–ª–µ–Ω–Ω—ã–π —Å—Ç–µ–∫–ª–æ–º"],
  "PA 1284": [1.13, 9.56 * 5, "–ø—Ä–æ—á–Ω—ã–π, –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π"],
  "PEEK (500–≥)": [1.32, 50.77 * 5, "–≤—ã—Å–æ–∫–æ—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π, —Å—É–ø–µ—Ä–ø–æ–ª–∏–º–µ—Ä"],
  "PEEK CF (500–≥)": [1.42, 56.74 * 5, "PEEK –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–≥–ª—ë–º"],
  "PEEK GF (500–≥)": [1.5, 59.77 * 5, "PEEK –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–µ–∫–ª–æ–º"],
  SBS: [1.04, 2.02 * 5, "—É–¥–∞—Ä–æ–ø—Ä–æ—á–Ω—ã–π, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π"],
  "PC GF": [1.3, 4.25 * 5, "–∂–∞—Ä–æ–ø—Ä–æ—á–Ω—ã–π, –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–µ–∫–ª–æ–º"],
  PVDF: [1.75, 60.36 * 5, "—Ñ—Ç–æ—Ä–æ–ø–ª–∞—Å—Ç, —Ö–∏–º—Å—Ç–æ–π–∫–∏–π"],
  PVA: [1.22, 5.39 * 5, "–≤–æ–¥–æ—Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π, –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–µ–∫"],
  ULTRAX: [1.4, 8.03 * 5, "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π, –∏–∑–Ω–æ—Å–æ—Å—Ç–æ–π–∫–∏–π"],
  "PP GF": [1.1, 4.46 * 5, "–ø–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–µ–∫–ª–æ–º"],
  "PEI 9085": [1.27, 65.53 * 5, "–∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π, —Ç–µ—Ä–º–æ—Å—Ç–æ–π–∫–∏–π"],
  PA12: [1.01, 10.41 * 5, "–Ω–µ–π–ª–æ–Ω, –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π"],
  PSU: [1.24, 18.84 * 5, "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π, —Ç–µ—Ä–º–æ—Å—Ç–æ–π–∫–∏–π"],
};

function sendToGoogleSheet() {
  const name = document.getElementById("userName").value.trim();
  const task = document.getElementById("userTask").value.trim();
  const dims = document.getElementById("userDims").value.trim();

  if (!name || !task || !dims) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.");
    return;
  }

  const priceMatch = dims.match(/–°—Ç–æ–∏–º–æ—Å—Ç—å: ([\d.]+)/);
  const price = priceMatch ? priceMatch[1] : "";

  fetch(
    "https://script.google.com/macros/s/AKfycbxTiUNSthR2Pv7Nuf5gfvEoA7HnW9wfSRA6PaACD0VLDNXZQiLvlRdWyHzUM2bFSKNuiA/exec",
    {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        name: name,
        phone: "",
        comment: task,
        price: price,
        file: "",
      }),
    }
  )
    .then((res) => {
      alert("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
      document.getElementById("userName").value = "";
      document.getElementById("userTask").value = "";
    })
    .catch((err) => {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.");
      console.error(err);
    });
}

function populateMaterials() {
  const filter = document.getElementById("materialFilter").value.toLowerCase();
  const materialSelect = document.getElementById("material");
  materialSelect.innerHTML = "";
  for (const key in materials) {
    const [_, price, description] = materials[key];
    if (description.toLowerCase().includes(filter)) {
      const option = document.createElement("option");
      option.value = key;
      option.textContent = `${key} (${description})`;
      if (price > 100) {
        option.style.color = "red";
        option.style.fontWeight = "bold";
      }
      materialSelect.appendChild(option);
    }
  }
  updateMaterialInfo();
}

function updateMaterialInfo() {
  const selected = document.getElementById("material").value;
  if (!materials[selected]) return;
  const [density, price, description] = materials[selected];
  document.getElementById(
    "materialInfo"
  ).innerHTML = `–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: ${density} –≥/—Å–º¬≥ ‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –≥—Ä–∞–º–º: ${price.toFixed(
    2
  )} ‚ÇΩ<br><i>–û–ø–∏—Å–∞–Ω–∏–µ: ${description}</i>`;
}

function filterCategory(keyword) {
  document.getElementById("materialFilter").value = keyword;
  populateMaterials();
}

function calculate() {
  const selected = document.getElementById("material").value;
  if (!materials[selected]) return;
  const [density, price] = materials[selected];
  const isMass = document
    .getElementById("btnMass")
    .classList.contains("active");
  let mass = 0;
  let extra = "";
  let connectionCost = 0;
  const qty = parseInt(document.getElementById("quantity").value) || 1;

  if (isMass) {
    const massVal = parseFloat(document.getElementById("massValue").value);
    if (!isNaN(massVal)) mass = massVal;
  } else {
    const l = parseFloat(document.getElementById("length").value);
    const w = parseFloat(document.getElementById("width").value);
    const h = parseFloat(document.getElementById("height").value);
    const f = parseFloat(document.getElementById("fill").value);
    if (!isNaN(l) && !isNaN(w) && !isNaN(h) && !isNaN(f)) {
      const volume_cm3 = ((l * w * h) / 1000) * (f / 100);
      mass = volume_cm3 * density;
      const xParts = l > 300 ? Math.ceil(l / 300) : 1;
      const yParts = w > 300 ? Math.ceil(w / 300) : 1;
      const zParts = h > 300 ? Math.ceil(h / 300) : 1;
      const totalParts = xParts * yParts * zParts;
      if (totalParts > 1) {
        const joins = totalParts - 1;
        connectionCost = 2500 + (joins - 1) * 1000;
        extra = `<br><span style='color:red;'>–î–µ—Ç–∞–ª—å –±—É–¥–µ—Ç –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ –º–µ–∂–¥—É —Å–æ–±–æ–π.<br>–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${connectionCost} ‚ÇΩ</span>`;
      }
    }
  }

  mass *= qty;
  const cost = Math.max(mass * price + connectionCost * qty, 2500);
  const finalText = `–ú–∞—Å—Å–∞ –º–æ–¥–µ–ª–∏: ${mass.toFixed(2)} –≥
–°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost.toFixed(2)} ‚ÇΩ${extra.replace(/<[^>]+>/g, "")}`;
  document.getElementById("result").innerHTML = `–ú–∞—Å—Å–∞ –º–æ–¥–µ–ª–∏: ${mass.toFixed(
    2
  )} –≥<br>–°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost.toFixed(2)} ‚ÇΩ${extra}`;
  document.getElementById("userDims").value = finalText;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document
  .getElementById("materialFilter")
  .addEventListener("input", populateMaterials);
document
  .getElementById("material")
  .addEventListener("change", updateMaterialInfo);
document
  .querySelectorAll("input")
  .forEach((el) => el.addEventListener("input", calculate));
document.getElementById("material").addEventListener("change", calculate);
document.getElementById("btnMass").addEventListener("click", () => {
  document.getElementById("btnMass").classList.add("active");
  document.getElementById("btnVolume").classList.remove("active");
  document.getElementById("massInput").style.display = "flex";
  document.getElementById("volumeInput").style.display = "none";
  calculate();
});
document.getElementById("btnVolume").addEventListener("click", () => {
  document.getElementById("btnVolume").classList.add("active");
  document.getElementById("btnMass").classList.remove("active");
  document.getElementById("volumeInput").style.display = "flex";
  document.getElementById("massInput").style.display = "none";
  calculate();
});

// –í–∫–ª–∞–¥–∫–∏
const tabButtons = document.querySelectorAll(".tab-button");
const tabContents = document.querySelectorAll(".tab-content");

tabButtons.forEach((button) => {
  button.addEventListener("click", () => {
    const tabId = button.dataset.tab;

    tabButtons.forEach((btn) => btn.classList.remove("active"));
    tabContents.forEach((content) => (content.style.display = "none"));

    button.classList.add("active");
    document.getElementById(tabId).style.display = "block";
  });
});

// Add event listeners for filter buttons
const filterButtons = document.querySelectorAll("#filterButtons button");
filterButtons.forEach((button) => {
  button.addEventListener("click", () => {
    const category = button.textContent.trim().replace(/[üîçüß±üßò‚Äç‚ôÇÔ∏èüî¨]/g, "");
    filterCategory(category);
  });
});

// Add event listener for form submission
const formButton = document.getElementById("sendBtn");
formButton.addEventListener("click", (event) => {
  event.preventDefault();
  sendToN8N();
});

populateMaterials();
calculate();

async function sendToN8N() {
  const name = document.getElementById("userName").value.trim();
  const phone = document.getElementById("userPhone").value.trim();
  const task = document.getElementById("userTask").value.trim();
  const dims = document.getElementById("userDims").value.trim();

  if (!name || !phone || !task || !dims) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.");
    return;
  }

  const payload = { name, phone, task, dims };

  formButton.disabled = true;
  formButton.textContent = "–û—Ç–ø—Ä–∞–≤–∫–∞...";

  try {
    const response = await fetch(N8N_WEBHOOK_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    alert("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É!");
    ["userName", "userPhone", "userTask", "userDims"].forEach(
      (id) => (document.getElementById(id).value = "")
    );
  } catch (err) {
    console.error(err);
    alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ N8N. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
  } finally {
    formButton.disabled = false;
    formButton.textContent = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å";
  }
}
